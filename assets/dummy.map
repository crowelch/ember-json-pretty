{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/components/ember-json-pretty.js","dummy/controllers/application.js","dummy/ember-json-pretty/tests/modules/ember-json-pretty/components/ember-json-pretty.jshint.js","dummy/helpers/fa-icon.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/routes/application.js","dummy/templates/application.js","dummy/templates/components/ember-json-pretty.js","dummy/templates/components/ember-line.js","dummy/tests/app.jshint.js","dummy/tests/controllers/application.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/application.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/components/ember-json-pretty-test.js","dummy/tests/unit/components/ember-json-pretty-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/components/ember-json-pretty', ['exports', 'ember', 'ember-json-pretty/components/ember-json-pretty'], function (exports, Ember, EmberJsonPrettyComponent) {\n\n\t'use strict';\n\n\texports['default'] = EmberJsonPrettyComponent['default'];\n\n});","define('dummy/controllers/application', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var ApplicationController = Ember['default'].ObjectController.extend({\n        jsonString: (function () {\n            var jsonObject = this.get(\"model.menus\");\n            return JSON.stringify(jsonObject);\n        }).property(\"jsonString\"),\n        refreshJson: (function () {\n            var jsonObject = JSON.parse(this.jsonString);\n            this.set(\"model.menus\", jsonObject);\n\n            console.log(\"teste\");\n        }).observes(\"jsonString\")\n    });\n\n    exports['default'] = ApplicationController;\n\n});","define('dummy/ember-json-pretty/tests/modules/ember-json-pretty/components/ember-json-pretty.jshint', function () {\n\n  'use strict';\n\n  module(\"JSHint - modules/ember-json-pretty/components\");\n  test(\"modules/ember-json-pretty/components/ember-json-pretty.js should pass jshint\", function () {\n    ok(true, \"modules/ember-json-pretty/components/ember-json-pretty.js should pass jshint.\");\n  });\n\n});","define('dummy/helpers/fa-icon', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var FA_PREFIX = /^fa\\-.+/;\n\n  var warn = Ember['default'].Logger.warn;\n\n  /**\n   * Handlebars helper for generating HTML that renders a FontAwesome icon.\n   *\n   * @param  {String} name    The icon name. Note that the `fa-` prefix is optional.\n   *                          For example, you can pass in either `fa-camera` or just `camera`.\n   * @param  {Object} options Options passed to helper.\n   * @return {Ember.Handlebars.SafeString} The HTML markup.\n   */\n  var faIcon = function faIcon(name, options) {\n    if (Ember['default'].typeOf(name) !== \"string\") {\n      var message = \"fa-icon: no icon specified\";\n      warn(message);\n      return Ember['default'].String.htmlSafe(message);\n    }\n\n    var params = options.hash,\n        classNames = [],\n        html = \"\";\n\n    classNames.push(\"fa\");\n    if (!name.match(FA_PREFIX)) {\n      name = \"fa-\" + name;\n    }\n    classNames.push(name);\n    if (params.spin) {\n      classNames.push(\"fa-spin\");\n    }\n    if (params.flip) {\n      classNames.push(\"fa-flip-\" + params.flip);\n    }\n    if (params.rotate) {\n      classNames.push(\"fa-rotate-\" + params.rotate);\n    }\n    if (params.lg) {\n      warn(\"fa-icon: the 'lg' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\\\"lg\\\"}}\");\n      classNames.push(\"fa-lg\");\n    }\n    if (params.x) {\n      warn(\"fa-icon: the 'x' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\\\"\" + params.x + \"\\\"}}\");\n      classNames.push(\"fa-\" + params.x + \"x\");\n    }\n    if (params.size) {\n      if (Ember['default'].typeOf(params.size) === \"string\" && params.size.match(/\\d+/)) {\n        params.size = Number(params.size);\n      }\n      if (Ember['default'].typeOf(params.size) === \"number\") {\n        classNames.push(\"fa-\" + params.size + \"x\");\n      } else {\n        classNames.push(\"fa-\" + params.size);\n      }\n    }\n    if (params.fixedWidth) {\n      classNames.push(\"fa-fw\");\n    }\n    if (params.listItem) {\n      classNames.push(\"fa-li\");\n    }\n    if (params.pull) {\n      classNames.push(\"pull-\" + params.pull);\n    }\n    if (params.border) {\n      classNames.push(\"fa-border\");\n    }\n    if (params.classNames && !Ember['default'].isArray(params.classNames)) {\n      params.classNames = [params.classNames];\n    }\n    if (!Ember['default'].isEmpty(params.classNames)) {\n      Array.prototype.push.apply(classNames, params.classNames);\n    }\n\n    html += \"<\";\n    var tagName = params.tagName || \"i\";\n    html += tagName;\n    html += \" class='\" + classNames.join(\" \") + \"'\";\n    if (params.title) {\n      html += \" title='\" + params.title + \"'\";\n    }\n    if (params.ariaHidden === undefined || params.ariaHidden) {\n      html += \" aria-hidden=\\\"true\\\"\";\n    }\n    html += \"></\" + tagName + \">\";\n    return Ember['default'].String.htmlSafe(html);\n  };\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(faIcon);\n\n  exports.faIcon = faIcon;\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('dummy/routes/application', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Route.extend({\n        model: function model() {\n            return { menus: [{\n                    name: \"menu 1\",\n                    events: [\"click\", \"hover\"],\n                    type: \"list\",\n                    object: {\n                        key: \"value1\",\n                        another: 1\n                    },\n                    submenus: [{\n                        name: \"submenu 1\",\n                        events: [\"click\"],\n                        type: \"text\",\n                        submenus: null\n                    }, {\n                        name: \"submenu 2\",\n                        events: [\"click\", \"check\"],\n                        type: \"checkbox\",\n                        submenus: null\n                    }],\n                    total_submenus: 2\n                }, {\n                    name: \"menu 2\",\n                    events: [\"click\", \"hover\"],\n                    type: \"list\",\n                    submenus: [{\n                        name: \"submenu 1\",\n                        events: [\"click\"],\n                        type: \"text\",\n                        submenus: null\n                    }, {\n                        name: \"submenu 2\",\n                        events: [\"click\"],\n                        type: \"text\",\n                        submenus: null\n                    }],\n                    total_submenus: 2\n                }]\n            };\n        }\n    });\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Welcome to Ember.js\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h3\");\n        var el2 = dom.createTextNode(\"Standard styles\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h3\");\n        var el2 = dom.createTextNode(\"Change styles\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[9]); }\n        var morph0 = dom.createMorphAt(fragment,1,2,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,5,6,contextualElement);\n        var morph3 = dom.createMorphAt(fragment,8,9,contextualElement);\n        inline(env, morph0, context, \"textarea\", [], {\"value\": get(env, context, \"jsonString\"), \"cols\": \"100\", \"rows\": \"10\"});\n        content(env, morph1, context, \"outlet\");\n        inline(env, morph2, context, \"ember-json-pretty\", [], {\"jsonObj\": get(env, context, \"this.model.menus\")});\n        inline(env, morph3, context, \"ember-json-pretty\", [], {\"jsonObj\": get(env, context, \"this.model.menus\"), \"options\": \"{\\n        \\\"keyColor\\\":\\\"#00FF7F\\\",\\n        \\\"keyHighlight\\\":\\\"#FAFAD2\\\",\\n        \\\"valueColor\\\":\\\"#FF0000\\\",\\n        \\\"valueHighlight\\\":\\\"#FFE4E1\\\",\\n        \\\"stringColor\\\":\\\"#551A8B\\\",\\n        \\\"stringHighlight\\\":\\\"#FFD39B\\\",\\n        \\\"braceColor\\\":\\\"#8B864E\\\",\\n        \\\"braceHighlight\\\":\\\"#FFD39B\\\",\\n        \\\"bracketColor\\\":\\\"#FFB90F\\\",\\n        \\\"bracketHighlight\\\":\\\"#90EE90\\\"}\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/components/ember-json-pretty', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"jsonTreeView\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,0,1);\n          element(env, element0, context, \"bind-attr\", [], {\"id\": get(env, context, \"id\")});\n          inline(env, morph0, context, \"partial\", [\"components/ember-line\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"pretty\")], {\"keyword\": \"line\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/components/ember-line', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"i\");\n            dom.setAttribute(el1,\"class\",\"fa fa-minus-square-o plus-icon\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element3 = dom.childAt(fragment, [1]);\n            element(env, element3, context, \"bind-attr\", [], {\"id\": get(env, context, \"element.plusId\")});\n            element(env, element3, context, \"action\", [\"toggleExpand\", get(env, context, \"element.plusId\")], {});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            var el2 = dom.createTextNode(\"\\n              \\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element2 = dom.childAt(fragment, [1]);\n            element(env, element2, context, \"bind-attr\", [], {\"class\": \"element.class\"});\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element1,0,1);\n            element(env, element1, context, \"bind-attr\", [], {\"class\": \"element.class\", \"style\": \"element.style\"});\n            content(env, morph0, context, \"element.element\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1,2,3]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n          var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"element.hasPlus\")], {}, child0, null);\n          block(env, morph1, context, \"if\", [get(env, context, \"element.isBlank\")], {}, child1, null);\n          block(env, morph2, context, \"unless\", [get(env, context, \"element.isBlank\")], {}, child2, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"new-line\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,0,1);\n          element(env, element0, context, \"bind-attr\", [], {\"data-id\": get(env, context, \"line.plusId\")});\n          inline(env, morph0, context, \"partial\", [\"components/ember-line\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1,2]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"line.elements\")], {\"keyword\": \"element\"}, child0, null);\n        block(env, morph1, context, \"each\", [get(env, context, \"line.lines\")], {\"keyword\": \"line\"}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/application.js should pass jshint', function() { \n    ok(true, 'controllers/application.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var App;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      App = Application['default'].create(attributes);\n      App.setupForTesting();\n      App.injectTestHelpers();\n    });\n\n    return App;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/routes/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/application.js should pass jshint', function() { \n    ok(true, 'routes/application.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n\tdocument.write(\"<div id=\\\"ember-testing-container\\\"><div id=\\\"ember-testing\\\"></div></div>\");\n\n\tQUnit.config.urlConfig.push({ id: \"nocontainer\", label: \"Hide container\" });\n\tvar containerVisibility = QUnit.urlParams.nocontainer ? \"hidden\" : \"visible\";\n\tdocument.getElementById(\"ember-testing-container\").style.visibility = containerVisibility;\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/components/ember-json-pretty-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n    'use strict';\n\n    var _rgb2hex = function _rgb2hex(rgb) {\n        var isRGBA = false;\n\n        if (/^#[0-9A-F]{6}$/i.test(rgb)) {\n            return rgb;\n        }isRGBA = rgb.indexOf(\"rgba\") > -1;\n\n        rgb = isRGBA ? rgb.match(/^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/) : rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n\n        function hex(x) {\n            return (\"0\" + parseInt(x).toString(16)).slice(-2).toUpperCase();\n        };\n\n        if (isRGBA) {\n            return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]) + hex(rgb[4]);\n        } else {\n            return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n        }\n    };\n\n    ember_qunit.moduleForComponent(\"ember-json-pretty\", \"component to print JSON with color and highlights and allow expand and retract arrays and objects\", {\n        needs: [\"template:components/ember-line\"]\n    });\n\n    ember_qunit.test(\"verify if tag name is CODE\", function () {\n        var component = this.subject(),\n            jsonObj;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        equal(this.$().context.tagName, \"CODE\");\n    });\n\n    ember_qunit.test(\"verify if JSON was printed\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n\n        equal(code.context.textContent.replace(/(\\r\\n|\\n|\\r)/gm, \"\").replace(/\\s+/g, \"\"), \"{key1:value1,key2:value2}\");\n    });\n\n    ember_qunit.test(\"verify if into first line the element that is presented is a brace\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            firstLine,\n            brace;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        firstLine = Ember['default'].$(code).find(\"div.jsonTreeView\")[0];\n        brace = Ember['default'].$(firstLine).find(\"span\")[0];\n\n        ok(Ember['default'].$(brace).hasClass(\"json-brace\"));\n    });\n\n    ember_qunit.test(\"verify if into second line there is a JSON key after the blank spaces\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            key;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        key = Ember['default'].$(secondLine).children()[0];\n\n        while (Ember['default'].$(key).hasClass(\"json-blank\")) {\n            key = Ember['default'].$(key).next();\n        }\n\n        ok(Ember['default'].$(key).hasClass(\"json-key\"));\n    });\n\n    ember_qunit.test(\"verify if exist separator between JSON key and value\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            key,\n            secondLine;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        key = Ember['default'].$(secondLine).children()[0];\n\n        while (Ember['default'].$(key).hasClass(\"json-blank\")) {\n            key = Ember['default'].$(key).next();\n        }\n\n        equal(Ember['default'].$(Ember['default'].$(key)).next().text().trim(), \":\");\n    });\n\n    ember_qunit.test(\"verify if last element in JSON is brace\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            lastSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        lastSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[1]).children().last();\n\n        ok(Ember['default'].$(lastSpan).hasClass(\"json-brace\"));\n    });\n\n    ember_qunit.test(\"verify standard color of key node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            key;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        key = Ember['default'].$(secondLine).children()[0];\n\n        while (Ember['default'].$(key).hasClass(\"json-blank\")) {\n            key = Ember['default'].$(key).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(key).css(\"color\")), \"#A52A2A\");\n    });\n\n    ember_qunit.test(\"verify changed color of key node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            key;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"options\", { keyColor: \"#00FF7F\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        key = Ember['default'].$(secondLine).children()[0];\n\n        while (Ember['default'].$(key).hasClass(\"json-blank\")) {\n            key = Ember['default'].$(key).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(key).css(\"color\")), \"#00FF7F\");\n    });\n\n    ember_qunit.test(\"verify standard highlight color of key node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            key;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        key = Ember['default'].$(secondLine).children()[0];\n\n        while (Ember['default'].$(key).hasClass(\"json-blank\")) {\n            key = Ember['default'].$(key).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(key).css(\"background-color\")), \"#FFFFFF\");\n    });\n\n    ember_qunit.test(\"verify changed highlight color of key node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            key;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"options\", { keyHighlight: \"#00FFFF\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        key = Ember['default'].$(secondLine).children()[0];\n\n        while (Ember['default'].$(key).hasClass(\"json-blank\")) {\n            key = Ember['default'].$(key).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(key).css(\"background-color\")), \"#00FFFF\");\n    });\n\n    ember_qunit.test(\"verify standard color of value node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            valueSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: 1,\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        valueSpan = Ember['default'].$(secondLine).children()[0];\n\n        while (!Ember['default'].$(valueSpan).hasClass(\"json-value\") && valueSpan) {\n            valueSpan = Ember['default'].$(valueSpan).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(valueSpan).css(\"color\")), \"#000080\");\n    });\n\n    ember_qunit.test(\"verify changed color of value node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            valueSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: 1,\n                key2: \"value2\"\n            };\n            component.set(\"options\", { valueColor: \"#FF0000\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        valueSpan = Ember['default'].$(secondLine).children()[0];\n\n        while (!Ember['default'].$(valueSpan).hasClass(\"json-value\") && valueSpan) {\n            valueSpan = Ember['default'].$(valueSpan).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(valueSpan).css(\"color\")), \"#FF0000\");\n    });\n\n    ember_qunit.test(\"verify standard highlight color of value node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            valueSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: 1,\n                key2: 2\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        valueSpan = Ember['default'].$(secondLine).children()[0];\n\n        while (!Ember['default'].$(valueSpan).hasClass(\"json-value\") && valueSpan) {\n            valueSpan = Ember['default'].$(valueSpan).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(valueSpan).css(\"background-color\")), \"#FFFFFF\");\n    });\n\n    ember_qunit.test(\"verify changed highlight color of value node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            valueSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: 1,\n                key2: 2\n            };\n            component.set(\"options\", { valueHighlight: \"#E0FFFF\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        valueSpan = Ember['default'].$(secondLine).children()[0];\n\n        while (!Ember['default'].$(valueSpan).hasClass(\"json-value\") && valueSpan) {\n            valueSpan = Ember['default'].$(valueSpan).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(valueSpan).css(\"background-color\")), \"#E0FFFF\");\n    });\n\n    ember_qunit.test(\"verify standard color of string node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            stringSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[1];\n        stringSpan = Ember['default'].$(secondLine).children()[0];\n\n        while (!Ember['default'].$(stringSpan).hasClass(\"json-string\") && stringSpan) {\n            stringSpan = Ember['default'].$(stringSpan).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(stringSpan).css(\"color\")), \"#C0FF3E\");\n    });\n\n    ember_qunit.test(\"verify changed color of string node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            stringSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"options\", { stringColor: \"#FF34B3\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[1];\n        stringSpan = Ember['default'].$(secondLine).children()[0];\n\n        while (!Ember['default'].$(stringSpan).hasClass(\"json-string\") && stringSpan) {\n            stringSpan = Ember['default'].$(stringSpan).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(stringSpan).css(\"color\")), \"#FF34B3\");\n    });\n\n    ember_qunit.test(\"verify standard highlight color of string node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            stringSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[1];\n        stringSpan = Ember['default'].$(secondLine).children()[0];\n\n        while (!Ember['default'].$(stringSpan).hasClass(\"json-string\") && stringSpan) {\n            stringSpan = Ember['default'].$(stringSpan).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(stringSpan).css(\"background-color\")), \"#FFFFFF\");\n    });\n\n    ember_qunit.test(\"verify changed highlight color of string node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            stringSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"options\", { stringHighlight: \"#FFBBFF\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[1];\n        stringSpan = Ember['default'].$(secondLine).children()[0];\n\n        while (!Ember['default'].$(stringSpan).hasClass(\"json-string\") && stringSpan) {\n            stringSpan = Ember['default'].$(stringSpan).next();\n        }\n\n        equal(_rgb2hex(Ember['default'].$(stringSpan).css(\"background-color\")), \"#FFBBFF\");\n    });\n\n    ember_qunit.test(\"verify standard color of brace node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            braceSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        braceSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"span\").first();\n\n        equal(_rgb2hex(Ember['default'].$(braceSpan).css(\"color\")), \"#000000\");\n    });\n\n    ember_qunit.test(\"verify changed color of brace node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            braceSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"options\", { braceColor: \"#FF34B3\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        braceSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"span\").first();\n\n        equal(_rgb2hex(Ember['default'].$(braceSpan).css(\"color\")), \"#FF34B3\");\n    });\n\n    ember_qunit.test(\"verify standard highlight color of brace node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            braceSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        braceSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"span\").first();\n\n        equal(_rgb2hex(Ember['default'].$(braceSpan).css(\"background-color\")), \"#FFFFFF\");\n    });\n\n    ember_qunit.test(\"verify changed highlight color of brace node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            braceSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = {\n                key1: \"value1\",\n                key2: \"value2\"\n            };\n            component.set(\"options\", { braceHighlight: \"#FFBBFF\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = Ember['default'].$(this.$()[0]);\n        braceSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"span\").first();\n\n        equal(_rgb2hex(Ember['default'].$(braceSpan).css(\"background-color\")), \"#FFBBFF\");\n    });\n\n    ember_qunit.test(\"verify standard color of bracket node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: \"value1\",\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        bracketSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"span\").first();\n\n        equal(_rgb2hex(Ember['default'].$(bracketSpan).css(\"color\")), \"#000000\");\n    });\n\n    ember_qunit.test(\"verify changed color of bracket node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: \"value1\",\n                key2: \"value2\"\n            }];\n            component.set(\"options\", { bracketColor: \"#FF34B3\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        bracketSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"span\").first();\n\n        equal(_rgb2hex(Ember['default'].$(bracketSpan).css(\"color\")), \"#FF34B3\");\n    });\n\n    ember_qunit.test(\"verify standard highlight color of bracket node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: \"value1\",\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        bracketSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"span\").first();\n\n        equal(_rgb2hex(Ember['default'].$(bracketSpan).css(\"background-color\")), \"#FFFFFF\");\n    });\n\n    ember_qunit.test(\"verify changed highlight color of bracket node\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: \"value1\",\n                key2: \"value2\"\n            }];\n            component.set(\"options\", { bracketHighlight: \"#FFBBFF\" });\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        bracketSpan = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"span\").first();\n\n        equal(_rgb2hex(Ember['default'].$(bracketSpan).css(\"background-color\")), \"#FFBBFF\");\n    });\n\n    ember_qunit.test(\"verify if exist a icone before the first bracket\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan,\n            plusSignal;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: \"value1\",\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        plusSignal = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).children().first();\n\n        ok(Ember['default'].$(plusSignal).is(\"i\"));\n    });\n\n    ember_qunit.test(\"verify if exist a icone with class to minus signal before the first bracket\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan,\n            plusSignal;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: \"value1\",\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        plusSignal = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).children().first();\n\n        ok(Ember['default'].$(plusSignal).hasClass(\"fa-minus-square-o\"));\n    });\n\n    ember_qunit.test(\"verify if exist a icone before each bracket\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan,\n            plusSignal;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: [\"1\", \"2\", \"3\"],\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n\n        Ember['default'].$.each(code.find(\"div.jsonTreeView\").children(), function (index, element) {\n            if (Ember['default'].$(element).hasClass(\"json-bracket\") && Ember['default'].$(element).text().trim() === \"[\") {\n                plusSignal = code.find(\"div.jsonTreeView\").children()[index - 1];\n\n                ok(Ember['default'].$(plusSignal).is(\"i\"));\n            }\n        });\n    });\n\n    ember_qunit.test(\"verify if exist a icone with class to minus signal before each bracket\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan,\n            plusSignal;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: [\"1\", \"2\", \"3\"],\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n\n        Ember['default'].$.each(code.find(\"div.jsonTreeView\").children(), function (index, element) {\n            if (Ember['default'].$(element).hasClass(\"json-bracket\") && Ember['default'].$(element).text().trim() === \"[\") {\n                plusSignal = code.find(\"div.jsonTreeView\").children()[index - 1];\n\n                ok(Ember['default'].$(plusSignal).hasClass(\"fa-minus-square-o\"));\n            }\n        });\n    });\n\n    ember_qunit.test(\"verify if exist a icone before each brace\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan,\n            plusSignal;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: {\n                    key3: \"value3\",\n                    key4: \"value4\"\n                },\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n\n        Ember['default'].$.each(code.find(\"div.jsonTreeView\").children(), function (index, element) {\n            if (Ember['default'].$(element).hasClass(\"json-brace\") && Ember['default'].$(element).text().trim() === \"{\") {\n                plusSignal = code.find(\"div.jsonTreeView\").children()[index - 1];\n\n                ok(Ember['default'].$(plusSignal).is(\"i\"));\n            }\n        });\n\n        Ember['default'].$.each(code.find(\"div.new-line\").children(), function (index, element) {\n            if (Ember['default'].$(element).hasClass(\"json-brace\") && Ember['default'].$(element).text().trim() === \"{\") {\n                plusSignal = code.find(\"div.new-line\").children()[index - 1];\n\n                ok(Ember['default'].$(plusSignal).is(\"i\"));\n            }\n        });\n    });\n\n    ember_qunit.test(\"verify if exist a icone with class to minus signal before each brace\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            bracketSpan,\n            plusSignal;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: {\n                    key3: \"value3\",\n                    key4: \"value4\"\n                },\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n\n        Ember['default'].$.each(code.find(\"div.jsonTreeView\").children(), function (index, element) {\n            if (Ember['default'].$(element).hasClass(\"json-brace\") && Ember['default'].$(element).text().trim() === \"{\") {\n                plusSignal = code.find(\"div.jsonTreeView\").children()[index - 1];\n\n                ok(Ember['default'].$(plusSignal).hasClass(\"fa-plus-square-o\"));\n            }\n        });\n\n        Ember['default'].$.each(code.find(\"div.new-line\").children(), function (index, element) {\n            if (Ember['default'].$(element).hasClass(\"json-brace\") && Ember['default'].$(element).text().trim() === \"{\") {\n                plusSignal = code.find(\"div.new-line\").children()[index - 1];\n\n                ok(Ember['default'].$(plusSignal).hasClass(\"fa-minus-square-o\"));\n            }\n        });\n    });\n\n    ember_qunit.test(\"verify if when icone is clicked the content within object is hidden\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            id;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: {\n                    key3: \"value3\",\n                    key4: \"value4\"\n                },\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        id = Ember['default'].$(code).find(\"i\").prop(\"id\");\n\n        Ember['default'].$(\"#\" + id).trigger(\"click\");\n\n        Ember['default'].$(\"[data-id=\\\"\" + id + \"\\\"]\").each(function (index, element) {\n            equal(Ember['default'].$(element).css(\"display\"), \"none\");\n        });\n    });\n\n    ember_qunit.test(\"verify if when icone is clicked the content within object is hidden when icone is clicked again the content within object is showed\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            id;\n\n        Ember['default'].run(function () {\n            jsonObj = [{\n                key1: \"value1\",\n                key2: \"value2\"\n            }, {\n                key1: {\n                    key3: \"value3\",\n                    key4: \"value4\"\n                },\n                key2: \"value2\"\n            }];\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        id = Ember['default'].$(code).find(\"i\").prop(\"id\");\n\n        Ember['default'].$(\"#\" + id).trigger(\"click\");\n\n        Ember['default'].$(\"[data-id=\\\"\" + id + \"\\\"]\").each(function (index, element) {\n            equal(Ember['default'].$(element).css(\"display\"), \"none\");\n        });\n\n        Ember['default'].$(\"#\" + id).trigger(\"click\");\n\n        Ember['default'].$(\"[data-id=\\\"\" + id + \"\\\"]\").each(function (index, element) {\n            equal(Ember['default'].$(element).css(\"display\"), \"block\");\n        });\n    });\n\n    ember_qunit.test(\"verify when JSON object informed is a text if into first line the element that is presented is a brace\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            firstLine,\n            brace;\n\n        Ember['default'].run(function () {\n            jsonObj = \"{\\\"name\\\": \\\"menu 1\\\",\\\"events\\\": [\\\"click\\\", \\\"hover\\\"]}\";\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        firstLine = Ember['default'].$(code).find(\"div.jsonTreeView\")[0];\n        brace = Ember['default'].$(firstLine).find(\"span\")[0];\n\n        ok(Ember['default'].$(brace).hasClass(\"json-brace\"));\n    });\n\n    ember_qunit.test(\"verify when JSON object informed is a text if into second line there is a JSON key after the blank spaces\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            secondLine,\n            key;\n\n        Ember['default'].run(function () {\n            jsonObj = \"{\\\"name\\\": \\\"menu 1\\\",\\\"events\\\": [\\\"click\\\", \\\"hover\\\"]}\";\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        secondLine = Ember['default'].$(Ember['default'].$(code).find(\"div.jsonTreeView\")[0]).find(\"div.new-line\")[0];\n        key = Ember['default'].$(secondLine).children()[0];\n\n        while (Ember['default'].$(key).hasClass(\"json-blank\")) {\n            key = Ember['default'].$(key).next();\n        }\n\n        ok(Ember['default'].$(key).hasClass(\"json-key\"));\n        equal(Ember['default'].$(key).text().trim(), \"name\");\n    });\n\n    ember_qunit.test(\"verify when JSON object informed is a text if there are two keys in JSON object\", function () {\n        var component = this.subject(),\n            jsonObj,\n            code,\n            keys;\n\n        Ember['default'].run(function () {\n            jsonObj = \"{\\\"name\\\": \\\"menu 1\\\",\\\"events\\\": [\\\"click\\\", \\\"hover\\\"]}\";\n            component.set(\"jsonObj\", jsonObj);\n        });\n\n        code = this.$();\n        keys = Ember['default'].$(code).find(\".json-key\");\n\n        equal(keys.length, 2);\n    });\n\n});","define('dummy/tests/unit/components/ember-json-pretty-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/ember-json-pretty-test.js should pass jshint', function() { \n    ok(true, 'unit/components/ember-json-pretty-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-json-pretty\",\"version\":\"0.1.1.0abb5b9b\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrh8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}